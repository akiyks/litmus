C auto/C-RW-Rs+RW-RCD+RW-R+RW-R+RW-R
(*
 * Result: Sometimes
 * 
 * Process 0 starts (t=396994).
 * 
 * P0 advances slightly (t=396995).
 * 
 * P1 advances slightly (t=396997).
 * 
 * P2 goes back a bit less than one grace period (t=297998).
 * 
 * P3 goes back a bit less than one grace period (t=198999).
 * 
 * P4 goes back a bit less than one grace period (t=100000).
 * 
 * Process 0 start at t=396994, process 5 end at t=100000: Cycle allowed.
 *)
{
 0:r3=x2; x1=y2; 1:r4=y2;
}

P0(int *x0, int *x1)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x0);
	rcu_assign_pointer(*x1, r3);
	rcu_read_unlock();
}


P1(int *x1)
{
	rcu_read_lock();
	intptr_t r1 = rcu_dereference(*x1);
	intptr_t r4 = (r1 != r4);
	if (r4) {
		WRITE_ONCE(*r1, 1);
	}
	rcu_read_unlock();
}


P2(int *x2, int *x3)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x2);
	WRITE_ONCE(*x3, 1);
	rcu_read_unlock();
}


P3(int *x3, int *x4)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x3);
	WRITE_ONCE(*x4, 1);
	rcu_read_unlock();
}


P4(int *x0, int *x4)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x4);
	WRITE_ONCE(*x0, 1);
	rcu_read_unlock();
}

exists
(0:r1=1 /\ 1:r1=x2 /\ 2:r1=1 /\ 3:r1=1 /\ 4:r1=1)
