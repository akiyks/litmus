C auto/C-RW-R+RW-R+RW-G+RW-G+RW-G+RW-G+RW-R+RW-R+RW-R+RW-R+RW-G+RW-G+RW-G+RW-G+RW-R+RW-R+RW-R+RW-R
(*
 * Result: Sometimes
 * 
 * Process 0 starts (t=297999).
 * 
 * P0 goes back a bit less than one grace period (t=198999).
 * 
 * P1 goes back a bit less than one grace period (t=100000).
 * 
 * P2 advances one grace period (t=200001).
 * 
 * P3 advances one grace period (t=300002).
 * 
 * P4 advances one grace period (t=400003).
 * 
 * P5 advances one grace period (t=500004).
 * 
 * P6 goes back a bit less than one grace period (t=401005).
 * 
 * P7 goes back a bit less than one grace period (t=302006).
 * 
 * P8 goes back a bit less than one grace period (t=203007).
 * 
 * P9 goes back a bit less than one grace period (t=104008).
 * 
 * P10 advances one grace period (t=204009).
 * 
 * P11 advances one grace period (t=304010).
 * 
 * P12 advances one grace period (t=404011).
 * 
 * P13 advances one grace period (t=504012).
 * 
 * P14 goes back a bit less than one grace period (t=405013).
 * 
 * P15 goes back a bit less than one grace period (t=306014).
 * 
 * P16 goes back a bit less than one grace period (t=207015).
 * 
 * P17 goes back a bit less than one grace period (t=108016).
 * 
 * Process 0 start at t=297999, process 18 end at t=108016: Cycle allowed.
 *)
{
}

P0(int *x0, int *x1)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x0);
	WRITE_ONCE(*x1, 1);
	rcu_read_unlock();
}


P1(int *x1, int *x2)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x1);
	WRITE_ONCE(*x2, 1);
	rcu_read_unlock();
}


P2(int *x2, int *x3)
{
	intptr_t r1 = READ_ONCE(*x2);
	synchronize_rcu();
	WRITE_ONCE(*x3, 1);
}


P3(int *x3, int *x4)
{
	intptr_t r1 = READ_ONCE(*x3);
	synchronize_rcu();
	WRITE_ONCE(*x4, 1);
}


P4(int *x4, int *x5)
{
	intptr_t r1 = READ_ONCE(*x4);
	synchronize_rcu();
	WRITE_ONCE(*x5, 1);
}


P5(int *x5, int *x6)
{
	intptr_t r1 = READ_ONCE(*x5);
	synchronize_rcu();
	WRITE_ONCE(*x6, 1);
}


P6(int *x6, int *x7)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x6);
	WRITE_ONCE(*x7, 1);
	rcu_read_unlock();
}


P7(int *x7, int *x8)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x7);
	WRITE_ONCE(*x8, 1);
	rcu_read_unlock();
}


P8(int *x8, int *x9)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x8);
	WRITE_ONCE(*x9, 1);
	rcu_read_unlock();
}


P9(int *x9, int *x10)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x9);
	WRITE_ONCE(*x10, 1);
	rcu_read_unlock();
}


P10(int *x10, int *x11)
{
	intptr_t r1 = READ_ONCE(*x10);
	synchronize_rcu();
	WRITE_ONCE(*x11, 1);
}


P11(int *x11, int *x12)
{
	intptr_t r1 = READ_ONCE(*x11);
	synchronize_rcu();
	WRITE_ONCE(*x12, 1);
}


P12(int *x12, int *x13)
{
	intptr_t r1 = READ_ONCE(*x12);
	synchronize_rcu();
	WRITE_ONCE(*x13, 1);
}


P13(int *x13, int *x14)
{
	intptr_t r1 = READ_ONCE(*x13);
	synchronize_rcu();
	WRITE_ONCE(*x14, 1);
}


P14(int *x14, int *x15)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x14);
	WRITE_ONCE(*x15, 1);
	rcu_read_unlock();
}


P15(int *x15, int *x16)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x15);
	WRITE_ONCE(*x16, 1);
	rcu_read_unlock();
}


P16(int *x16, int *x17)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x16);
	WRITE_ONCE(*x17, 1);
	rcu_read_unlock();
}


P17(int *x17, int *x0)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x17);
	WRITE_ONCE(*x0, 1);
	rcu_read_unlock();
}

exists
(0:r1=1 /\ 1:r1=1 /\ 2:r1=1 /\ 3:r1=1 /\ 4:r1=1 /\ 5:r1=1 /\ 6:r1=1 /\ 7:r1=1 /\ 8:r1=1 /\ 9:r1=1 /\ 10:r1=1 /\ 11:r1=1 /\ 12:r1=1 /\ 13:r1=1 /\ 14:r1=1 /\ 15:r1=1 /\ 16:r1=1 /\ 17:r1=1)
