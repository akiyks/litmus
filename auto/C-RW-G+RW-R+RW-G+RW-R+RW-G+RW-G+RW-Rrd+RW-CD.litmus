C auto/C-RW-G+RW-R+RW-G+RW-R+RW-G+RW-G+RW-Rrd+RW-CD
(*
 * Result: Never
 * 
 * Process 0 starts (t=100000).
 * 
 * P0 advances one grace period (t=200000).
 * 
 * P1 goes back a bit less than one grace period (t=101001).
 * 
 * P2 advances one grace period (t=201002).
 * 
 * P3 goes back a bit less than one grace period (t=102003).
 * 
 * P4 advances one grace period (t=202004).
 * 
 * P5 advances one grace period (t=302005).
 * 
 * P6 advances slightly (t=302007).
 * 
 * P7 advances slightly (t=302009).
 * 
 * Process 0 start at t=100000, process 8 end at t=302009: Cycle forbidden.
 *)
{
 6:r3=x0; x7=y0; 7:r4=y0;
}

P0(int *x0, int *x1)
{
	r1 = READ_ONCE(*x0);
	synchronize_rcu();
	WRITE_ONCE(*x1, 1);
}


P1(int *x1, int *x2)
{
	rcu_read_lock();
	r1 = READ_ONCE(*x1);
	WRITE_ONCE(*x2, 1);
	rcu_read_unlock();
}


P2(int *x2, int *x3)
{
	r1 = READ_ONCE(*x2);
	synchronize_rcu();
	WRITE_ONCE(*x3, 1);
}


P3(int *x3, int *x4)
{
	rcu_read_lock();
	r1 = READ_ONCE(*x3);
	WRITE_ONCE(*x4, 1);
	rcu_read_unlock();
}


P4(int *x4, int *x5)
{
	r1 = READ_ONCE(*x4);
	synchronize_rcu();
	WRITE_ONCE(*x5, 1);
}


P5(int *x5, int *x6)
{
	r1 = READ_ONCE(*x5);
	synchronize_rcu();
	WRITE_ONCE(*x6, 1);
}


P6(int *x6, int *x7)
{
	rcu_read_lock();
	r1 = READ_ONCE(*x6);
	smp_store_release(x7, r3);
	rcu_read_unlock();
}


P7(int *x7)
{
	r1 = rcu_dereference(*x7);
	r4 = (r1 != r4);
	if (r4) {
		WRITE_ONCE(*r1, 1);
	}
}

exists
(0:r1=1 /\ 1:r1=1 /\ 2:r1=1 /\ 3:r1=1 /\ 4:r1=1 /\ 5:r1=1 /\ 6:r1=1 /\ 7:r1=x0)
