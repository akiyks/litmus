C auto/C-WR-G+WR-G+WR-G+WR-G+WR-G+WR-R+WR-R
(*
 * Result: Never
 * 
 * Process 0 starts (t=100000).
 * 
 * P0 advances one grace period (t=200000).
 * 
 * P1 advances one grace period (t=300001).
 * 
 * P2 advances one grace period (t=400002).
 * 
 * P3 advances one grace period (t=500003).
 * 
 * P4 advances one grace period (t=600004).
 * 
 * P5 goes back a bit less than one grace period (t=501005).
 * 
 * P6 goes back a bit less than one grace period (t=402006).
 * 
 * Process 0 start at t=100000, process 7 end at t=402006: Cycle forbidden.
 *)
{
}

P0(int *x0, int *x1)
{
	WRITE_ONCE(*x0, 2);
	synchronize_rcu();
	intptr_t r2 = READ_ONCE(*x1);
}


P1(int *x1, int *x2)
{
	WRITE_ONCE(*x1, 2);
	synchronize_rcu();
	intptr_t r2 = READ_ONCE(*x2);
}


P2(int *x2, int *x3)
{
	WRITE_ONCE(*x2, 2);
	synchronize_rcu();
	intptr_t r2 = READ_ONCE(*x3);
}


P3(int *x3, int *x4)
{
	WRITE_ONCE(*x3, 2);
	synchronize_rcu();
	intptr_t r2 = READ_ONCE(*x4);
}


P4(int *x4, int *x5)
{
	WRITE_ONCE(*x4, 2);
	synchronize_rcu();
	intptr_t r2 = READ_ONCE(*x5);
}


P5(int *x5, int *x6)
{
	rcu_read_lock();
	WRITE_ONCE(*x5, 2);
	intptr_t r2 = READ_ONCE(*x6);
	rcu_read_unlock();
}


P6(int *x6, int *x0)
{
	rcu_read_lock();
	WRITE_ONCE(*x6, 2);
	intptr_t r2 = READ_ONCE(*x0);
	rcu_read_unlock();
}

exists
(6:r2=0 /\ 0:r2=0 /\ 1:r2=0 /\ 2:r2=0 /\ 3:r2=0 /\ 4:r2=0 /\ 5:r2=0)
