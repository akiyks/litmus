C auto/C-RW-G+RW-R1I+RW-R1I+RW-R1I
(*
 * Result: Sometimes
 * 
 * Process 0 starts (t=100000).
 * 
 * P0 advances one grace period (t=200000).
 * 
 * P1 is unordered, therefore cycle is allowed.
 * Skipping remainder of analysis.
 *)
{
}

P0(int *x0, int *x1)
{
	intptr_t r1 = READ_ONCE(*x0);
	synchronize_rcu();
	WRITE_ONCE(*x1, 1);
}


P1(int *x1, int *x2)
{
	rcu_read_lock();
	WRITE_ONCE(*x2, 1);
	rcu_read_unlock();
	intptr_t r1 = READ_ONCE(*x1);
}


P2(int *x2, int *x3)
{
	rcu_read_lock();
	WRITE_ONCE(*x3, 1);
	rcu_read_unlock();
	intptr_t r1 = READ_ONCE(*x2);
}


P3(int *x0, int *x3)
{
	rcu_read_lock();
	WRITE_ONCE(*x0, 1);
	rcu_read_unlock();
	intptr_t r1 = READ_ONCE(*x3);
}

exists
(0:r1=1 /\ 1:r1=1 /\ 2:r1=1 /\ 3:r1=1)
